[0m[[0m[0mdebug[0m] [0m[0m> Exec(collectAnalyses, None, Some(CommandSource(network-1)))[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Processing event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: initialized: JsonRpcNotificationMessage(2.0, initialized, {})[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Compile / collectAnalyses[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: Signal, check cycles: false, forcegc: true[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/cheew/OneDrive/Desktop/NUS%20MComp/Y1S2/IT5100A/project/main/src/main/scala/foodkeep/view/NavBarView.scala","languageId":"scala","version":1,"text":"package foodkeep.view\r\n\r\nimport org.scalajs.dom\r\nimport org.scalajs.dom.document\r\nimport org.scalajs.dom.html\r\nimport org.scalajs.dom.ext\r\nimport scala.scalajs.js\r\nimport js.annotation._\r\n\r\nobject NavBarView {\r\n    private val sectionHeader = document.querySelector(\".section-header\")\r\n    private val buttonMobileNav = document.querySelector(\".button-mobile-nav\")\r\n    private val linkContainerNavBar = document.querySelector(\".header-nav-list\")\r\n    \r\n    def addHandlerNavBar: Unit = {\r\n        buttonMobileNav.addEventListener(\"click\", (e: dom.Event) => {\r\n            sectionHeader.classList.toggle(\"nav-open\")\r\n        })\r\n\r\n        linkContainerNavBar.addEventListener(\"click\", (e: dom.Event) => {\r\n            val eventTarget = e.target.asInstanceOf[html.Element]\r\n            if (eventTarget.classList.contains(\"nav-link\") && sectionHeader.classList.contains(\"nav-open\")) \r\n                sectionHeader.classList.remove(\"nav-open\")\r\n            }\r\n        )\r\n    }\r\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/cheew/OneDrive/Desktop/NUS%20MComp/Y1S2/IT5100A/project/main/src/main/scala/foodkeep/view/SummaryView.scala","languageId":"scala","version":1,"text":"package foodkeep.view\r\n\r\nimport org.scalajs.dom\r\nimport org.scalajs.dom.document\r\nimport org.scalajs.dom.html\r\nimport org.scalajs.dom.ext\r\nimport scala.scalajs.js\r\nimport js.annotation._\r\n\r\nimport foodkeep.helper._\r\nimport foodkeep.util.util._\r\nimport foodkeep.util.ProfileUtil._\r\nimport foodkeep.util.DailyMealUtil._\r\nimport foodkeep.util.MonthlyMealUtil._\r\nimport foodkeep.util.StateUtil._\r\n\r\nobject SummaryView {\r\n    private val dailyDayDesc = document.querySelector(\".day--desc\")\r\n    private val dailyDayDate = document.querySelector(\".day--date\")\r\n    private val dailyDayCalories = document.querySelector(\".day--calories\")\r\n    private val dailyDayExpenses = document.querySelector(\".day--expenses\")\r\n    private val dailyDayTable = document.querySelector(\".day--table\")\r\n    \r\n    private val monthlyMonthDesc = document.querySelector(\".month--desc\")\r\n    private val monthlyMonthDate = document.querySelector(\".month--date\")\r\n    private val monthlyMonthTarget = document.querySelector(\".month--target\")\r\n    private val monthlyMonthAvgCalories = document.querySelector(\".month--avgcalories\")\r\n    private val monthlyMonthAllExpenses = document.querySelector(\".month--allexpenses\")\r\n    private val monthlyMonthAvgExpenses = document.querySelector(\".month--avgexpenses\")\r\n    \r\n    def render(mealsOption: Option[(DailyMeal, MonthlyMeal)]): Unit = mealsOption match {\r\n        case Some(meals) => {\r\n            renderDailySummary(meals._1)\r\n            renderMonthlySummary(meals._2)\r\n        }\r\n        case _ => {\r\n            renderDailyNoData()\r\n            renderMonthlyNoData()\r\n        }\r\n    }\r\n    \r\n    private def renderDailySummary(dailyMeal: DailyMeal): Unit = {\r\n        val date = dailyMeal.date\r\n        val record = dailyMeal.record\r\n        val totalExpenses = dailyMeal.totalExpenses\r\n        val totalCalories = dailyMeal.totalCalories\r\n        val caloriesTarget = dailyMeal.caloriesTarget\r\n\r\n        dailyDayDesc.textContent = renderDayDesc(date)\r\n        dailyDayDate.textContent = renderDateDOM(date)\r\n        dailyDayCalories.textContent = renderCalories(totalCalories, caloriesTarget)\r\n        dailyDayExpenses.textContent = renderExpense(totalExpenses)\r\n        dailyDayTable.innerHTML = generateMarkUpSummaryTable(record)\r\n    }\r\n\r\n    private def renderMonthlySummary(monthlyMeal: MonthlyMeal): Unit = {\r\n        val monthYear = monthlyMeal.monthYear\r\n        val record = monthlyMeal.record\r\n        val totalExpenses = monthlyMeal.totalExpenses\r\n        val totalCalories = monthlyMeal.totalCalories\r\n        val avgCaloriesTarget = getAvgCaloriesTarget(record)\r\n\r\n        monthlyMonthDesc.textContent = renderMonthDesc(monthYear)\r\n        monthlyMonthDate.textContent = renderMonthDate(monthYear)\r\n        monthlyMonthTarget.textContent = renderMonthTarget(record)\r\n        monthlyMonthAvgCalories.textContent = renderCalories(totalCalories/record.length, avgCaloriesTarget)\r\n        monthlyMonthAllExpenses.textContent = renderExpense(totalExpenses)\r\n        monthlyMonthAvgExpenses.textContent = renderExpense(totalExpenses/record.length) \r\n    }\r\n\r\n    private def renderDailyNoData(): Unit = {\r\n        dailyDayDesc.textContent = \"Not Available\"\r\n        dailyDayDate.textContent = \"Not Available\"\r\n        dailyDayCalories.textContent = \"Not Available\"\r\n        dailyDayExpenses.textContent = \"Not Available\"\r\n        dailyDayTable.innerHTML = \"\"\r\n    }\r\n    \r\n    private def renderMonthlyNoData(): Unit = {\r\n        monthlyMonthDesc.textContent = \"Not Available\"\r\n        monthlyMonthDate.textContent = \"Not Available\"\r\n        monthlyMonthTarget.textContent = \"Not Available\"\r\n        monthlyMonthAvgCalories.textContent = \"Not Available\"\r\n        monthlyMonthAllExpenses.textContent = \"Not Available\"\r\n        monthlyMonthAvgExpenses.textContent = \"Not Available\"\r\n    }\r\n\r\n    private def generateMarkUpSummaryTable(record: js.Array[Meal]): String = {\r\n        record.map(meal => {\r\n            val time = renderTime(meal.dateTime)\r\n            val foodName = renderFoodName(meal.foodName)\r\n            val expense = renderExpense(meal.expense)\r\n\r\n            s\"\"\"<div class=\"table-row\">\r\n              <div class=\"row-time\">${time}</div>\r\n              <div class=\"row-meal\">${foodName}</div>\r\n              <div class=\"row-expense\">${expense}</div>\r\n            </div>\"\"\"\r\n        }).join(\"\")\r\n    }\r\n\r\n    private def renderDayDesc(date: String): String = \r\n        if (date == getDateDMY) \"Today\" else \"History\"\r\n    \r\n    private def renderMonthDesc(monthYear: String): String = \r\n        if (monthYear == getDateMY) \"This month\" else \"History\"\r\n\r\n    private def renderTime(dateTime: String): String = dateTime.drop(8) + \" h\"\r\n\r\n    private def renderFoodName(foodName: String): String = if (foodName.length > 16) foodName.slice(0, 13) + \"...\" else foodName\r\n\r\n    private def renderExpense(expense: Double): String = \"$ \" + expense match {\r\n        case s if s.contains(\".\") => s\r\n        case j => j + \".00\"\r\n    }\r\n\r\n    private def renderCalories(calories: Int, caloriesTarget: Int): String = {\r\n        val fieldCalories = js.Array(dailyDayCalories, monthlyMonthAvgCalories)\r\n        if (calories <= caloriesTarget) fieldCalories.foreach(field => {\r\n            field.classList.add(\"on-target\")\r\n            field.classList.remove(\"off-target\")\r\n        })\r\n        else fieldCalories.foreach(field => {\r\n            field.classList.remove(\"on-target\")\r\n            field.classList.add(\"off-target\")\r\n        })\r\n        s\"${calories} kCal\"\r\n    }\r\n\r\n    private def renderMonthTarget(record: js.Array[DailyMeal]): String = {\r\n        val target = record.filter(daily => daily.totalCalories <= daily.caloriesTarget).length\r\n\r\n        if (target.toFloat/record.length >= 0.6) {\r\n            monthlyMonthTarget.classList.add(\"on-target\")\r\n            monthlyMonthTarget.classList.remove(\"off-target\")\r\n        }\r\n        else {\r\n            monthlyMonthTarget.classList.add(\"off-target\")\r\n            monthlyMonthTarget.classList.remove(\"on-target\")\r\n        }\r\n\r\n        s\"${target}/${record.length} day${if (record.length > 1) \"s\" else \"\"}\"\r\n    }\r\n\r\n    private def getAvgCaloriesTarget(record: js.Array[DailyMeal]): Int =    \r\n        record.foldLeft(0)((sum, daily) => sum + daily.caloriesTarget)/record.length\r\n    \r\n    private def renderMonthDate(monthYear: String): String = \r\n        monthList(monthYear.drop(4).toInt - 1) + \" \" + monthYear.dropRight(2)\r\n\r\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0manalysis location (C:\Users\cheew\OneDrive\Desktop\NUS MComp\Y1S2\IT5100A\project\main\target\scala-2.13\zinc\inc_compile_2.13.zip,true)[0m
[0m[[0m[32msuccess[0m] [0m[0mTotal time: 0 s, completed 7 Mar 2022, 12:46:20 AM[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Done event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(shell, None, None)[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled request received: shutdown: JsonRpcRequestMessage(2.0, â™¨1, shutdown, null})[0m
