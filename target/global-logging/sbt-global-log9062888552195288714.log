[0m[[0m[0mdebug[0m] [0m[0m> Exec(collectAnalyses, None, Some(CommandSource(network-1)))[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Processing event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: initialized: JsonRpcNotificationMessage(2.0, initialized, {})[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Compile / collectAnalyses[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: Signal, check cycles: false, forcegc: true[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/cheew/OneDrive/Desktop/NUS%20MComp/Y1S2/IT5100A/project/main/src/main/scala/foodkeep/util/StateUtil.scala","languageId":"scala","version":1,"text":"package foodkeep.util \r\n\r\nimport scala.scalajs.js\r\nimport foodkeep.helper._\r\nimport foodkeep.util.util._\r\n\r\npackage object StateUtil {\r\n    import foodkeep.util.ProfileUtil._\r\n    import foodkeep.util.DailyMealUtil._\r\n    import foodkeep.util.MonthlyMealUtil._\r\n\r\n    implicit class StateUtil[State](s: js.Object) {\r\n        \r\n        def pushNewProfile(profile: Profile) = {\r\n            val sC = State(s)\r\n            val updatedProfileHistory = \r\n                if (sC.profileHistory.length > 0) \r\n                    sC.profileHistory.dropRight(1) :+ sC.profileHistory.last.updateEndDate(getDateDMY) :+ profile.updateStartDate(getCustomDateDMY(1)).updateEndDate().updateCaloriesTarget \r\n                \r\n                else sC.profileHistory :+ profile.updateStartDate().updateEndDate().updateCaloriesTarget\r\n            \r\n            State(updatedProfileHistory, sC.mealHistory, sC.searchResults)\r\n        }\r\n\r\n        def pushNewMealState(meal: Meal) = {\r\n            val sC = State(s)\r\n            val updatedMealHistory = sC.mealHistory.dropRight(1) :+ sC.mealHistory.last.pushNewMealMonthly(meal)\r\n\r\n            State(sC.profileHistory, updatedMealHistory, sC.searchResults)\r\n        }\r\n\r\n        def pushNewDailyMealState(caloriesTarget: Int) = {\r\n            val sC = State(s)\r\n            val updatedMealHistory = sC.mealHistory.dropRight(1) :+ sC.mealHistory.last.pushNewDailyMealMonthly(caloriesTarget)\r\n\r\n            State(sC.profileHistory, updatedMealHistory, sC.searchResults)\r\n        }\r\n\r\n        def pushNewMonthlyMealState = {\r\n            val sC = State(s)\r\n            val updatedMealHistory = sC.mealHistory :+ MonthlyMeal(getDateMY, js.Array[DailyMeal](), 0, 0)\r\n\r\n            State(sC.profileHistory, updatedMealHistory, sC.searchResults)\r\n        }\r\n\r\n        def pushNewSearchResults(results: js.Array[SearchResult]) = {\r\n            val sC = State(s)\r\n            State(sC.profileHistory, sC.mealHistory, results)\r\n        }   \r\n\r\n        def getCurrentProfile: Option[Profile] = {\r\n            val sC = State(s)\r\n            sC.profileHistory.lastOption match {\r\n                case Some(p) if (p.startDate.toInt <= getDateDMY.toInt) => Some(p)\r\n                case Some(p) => State(sC.profileHistory.dropRight(1), sC.mealHistory, sC.searchResults).getCurrentProfile\r\n                case _ => None\r\n            }           \r\n        }\r\n\r\n        def getCurrentCaloriesTarget: Option[Int] = {\r\n            getCurrentProfile match {\r\n                case Some(p) => Some(p.getCaloriesTarget)\r\n                case _ => None\r\n            }\r\n        }\r\n\r\n        def getFilterQuery(date: String): Option[(DailyMeal, MonthlyMeal)] = {\r\n            val sC = State(s)\r\n            \r\n            sC.mealHistory.filter(monthly => monthly.monthYear == date.dropRight(2)).lastOption match {\r\n                case Some(m) => (Some(m), m.getDailyMeal(date)) match {\r\n                    case (Some(m), Some(d)) => Some(d, m)\r\n                    case _ => None\r\n                }\r\n                case _ => None\r\n            }\r\n        }\r\n\r\n        def getSearchResults: Option[js.Array[SearchResult]] = State(s).searchResults match {\r\n            case r if r.length > 0 => Some(r)\r\n            case _ => None\r\n        }\r\n\r\n        def getProfileHistory: Option[js.Array[Profile]] = State(s).profileHistory match {\r\n            case r if r.length > 0 => Some(r)\r\n            case _ => None\r\n        }\r\n\r\n        def checkDailyMonthlyPresent(date: String): (Boolean, Boolean) = {\r\n            val sC = State(s)\r\n\r\n            sC.mealHistory.filter(monthly => monthly.monthYear == date.dropRight(2)).lastOption match {\r\n                case Some(m) => (Some(m), m.getDailyMeal(date)) match {\r\n                    case (Some(m), Some(d)) => (true, true)\r\n                    case _ => (false, true)\r\n                }\r\n                case _ => (false, false)\r\n            }\r\n        }\r\n        \r\n    }\r\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/cheew/OneDrive/Desktop/NUS%20MComp/Y1S2/IT5100A/project/main/src/main/scala/foodkeep/view/AddMealView.scala","languageId":"scala","version":1,"text":"package foodkeep.view\r\n\r\nimport org.scalajs.dom\r\nimport org.scalajs.dom.document\r\nimport org.scalajs.dom.html\r\nimport org.scalajs.dom.ext\r\nimport scala.scalajs.js\r\nimport js.annotation._\r\n\r\nimport foodkeep.helper._\r\nimport foodkeep.util.util._\r\nimport foodkeep.util.ProfileUtil._\r\nimport foodkeep.util.DailyMealUtil._\r\nimport foodkeep.util.MonthlyMealUtil._\r\nimport foodkeep.util.StateUtil._\r\n\r\nimport scala.util.{Try,Success,Failure}\r\n\r\nobject AddMealView {\r\n    private val queryFieldExpense = document.querySelector(\"#expense\").asInstanceOf[html.Input]\r\n    private val searchResultsContainer = document.querySelector(\".hero-search-results\")\r\n    \r\n\r\n    def addHandlerAddMeal(handler: (Int, Double) => Boolean): Unit = {\r\n        searchResultsContainer.addEventListener(\"click\", (e: dom.Event) => {\r\n            val eventTarget = e.target.asInstanceOf[html.Element]\r\n            val expense = queryFieldExpense.value \r\n\r\n            if (eventTarget.classList.contains(\"button-addmeal\") && validateQueryFieldExpense(expense)) {\r\n                eventTarget.dataset.get(\"idx\") match {\r\n                    case Some(i) => handler(i.toInt, expense.toDouble) match {\r\n                        case false => dom.window.alert(\"Cannot find valid profile!\")\r\n                        case _ => dom.window.alert(s\"Meal added at ${renderTime(getDateDMYT)}!\")\r\n                    }\r\n                    case _ =>   \r\n                }\r\n            }\r\n        })    \r\n    }\r\n\r\n    private def validateQueryFieldExpense(expense: String): Boolean = \r\n        Try(expense.toDouble) match {\r\n            case Success(v) => true\r\n            case _ => {\r\n                dom.window.alert(\"Invalid value detected!\")\r\n                false\r\n            }\r\n        }\r\n\r\n    private def renderTime(date: String): String = s\"${date.drop(8).dropRight(2)}${date.drop(10)}h\"\r\n     \r\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/cheew/OneDrive/Desktop/NUS%20MComp/Y1S2/IT5100A/project/main/src/main/scala/foodkeep/Model.scala","languageId":"scala","version":1,"text":"package foodkeep.model\r\n\r\nimport org.scalajs.dom\r\nimport org.scalajs.dom.ext\r\nimport scala.scalajs.js\r\n\r\n// for making fetch request\r\n// import concurrent.ExecutionContext.Implicits.global\r\nimport js.Thenable.Implicits._\r\nimport org.scalajs.macrotaskexecutor.MacrotaskExecutor.Implicits._\r\nimport scala.concurrent.Future\r\n\r\nimport foodkeep.config.Config._\r\n\r\nimport foodkeep.helper._\r\nimport foodkeep.util.util._\r\nimport foodkeep.util.SearchResultUtil._\r\nimport foodkeep.util.ProfileUtil._\r\nimport foodkeep.util.DailyMealUtil._\r\nimport foodkeep.util.MonthlyMealUtil._\r\nimport foodkeep.util.StateUtil._\r\n\r\nobject Model {\r\n    var state = State(js.Array[Profile](), js.Array[MonthlyMeal](), js.Array[SearchResult]())\r\n\r\n    init()\r\n\r\n    private def setState(newState: State): Unit = {\r\n        state = newState\r\n        dom.window.localStorage.setItem(\"state\", js.JSON.stringify(state))\r\n    }\r\n\r\n    private def getStateFromLocalStorage: Option[State] = js.JSON.parse(dom.window.localStorage.getItem(\"state\")).asInstanceOf[State] match {\r\n        case n if (n == null) => None\r\n        case s => Some(s)\r\n    }\r\n    \r\n    private def clearStateFromLocalStorage: Unit = dom.window.localStorage.clear()\r\n\r\n    private def init(): Unit = {\r\n        getStateFromLocalStorage match {\r\n            case Some(s) => setState(s)\r\n            case _ => \r\n        }\r\n    }\r\n\r\n    def getProfileHistoryFromState: Option[js.Array[Profile]] = state.getProfileHistory\r\n\r\n    def getCurrentProfileFromState: Option[Profile] = state.getCurrentProfile\r\n\r\n    def pushNewProfileToState(profile: Profile): Unit = setState(state.pushNewProfile(profile))\r\n\r\n    def getSearchResultsFromState: Option[js.Array[SearchResult]] = state.getSearchResults\r\n\r\n    def pushNewSearchResultsToState(query: String): Future[Option[js.Array[SearchResult]]] = {\r\n        val url = s\"https://api.nal.usda.gov/fdc/v1/foods/search?query=$query&pageSize=$MAX_NBR_QUERY&api_key=$API_KEY\"\r\n\r\n        dom.fetch(url).flatMap(\r\n            response => response.text()\r\n        ).map(\r\n            responseText => {\r\n                val foods = js.JSON.parse(responseText).foods.asInstanceOf[js.Array[js.Dynamic]]\r\n                val searchResults = generateSearchResults(foods)\r\n                setState(state.pushNewSearchResults(searchResults))\r\n                state.getSearchResults   \r\n            })      \r\n    }\r\n\r\n    private def generateSearchResults(foods: js.Array[js.Dynamic]): js.Array[SearchResult] = {\r\n        foods.map(food => {\r\n            val foodId = food.fdcId.asInstanceOf[Int]\r\n            val foodName = food.description.asInstanceOf[String]\r\n            val nutrients = food.foodNutrients.asInstanceOf[js.Array[js.Dynamic]]\r\n\r\n            val caloriesContent = findNutrientValue(1008, nutrients)\r\n            val carbContent = findNutrientValue(1005, nutrients)\r\n            val proteinContent = findNutrientValue(1003, nutrients)\r\n            val fatContent = findNutrientValue(1004, nutrients)\r\n\r\n            SearchResult(foodId, foodName,caloriesContent, carbContent, proteinContent, fatContent)\r\n        })\r\n    }\r\n\r\n    private def findNutrientValue(nutrientId: Int, nutrients: js.Array[js.Dynamic]): Int = {\r\n        nutrients.filter(nutrient => nutrient.nutrientId.asInstanceOf[Int] == nutrientId).lastOption match {\r\n            case Some(n) => n.value.asInstanceOf[Double].toInt\r\n            case None => 0\r\n        }\r\n    }\r\n\r\n    def pushNewMealToState(index: Int, currentCaloriesTarget: Int, expense: Double): Unit = {\r\n        state.checkDailyMonthlyPresent(getDateDMY) match {\r\n            case (false, false) => {\r\n                setState(state.pushNewMonthlyMealState)\r\n                setState(state.pushNewDailyMealState(currentCaloriesTarget))\r\n            }\r\n            case (false, true) => {\r\n                setState(state.pushNewDailyMealState(currentCaloriesTarget))\r\n            }\r\n            case _ => \r\n        }\r\n\r\n        val selectedMeal: Meal = state.getSearchResults.get(index).parseSearchResultAsMeal(expense)\r\n\r\n        setState(state.pushNewMealState(selectedMeal))\r\n    }\r\n\r\n    def getCurrentCaloriesTargetFromState: Option[Int] = state.getCurrentCaloriesTarget\r\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0manalysis location (C:\Users\cheew\OneDrive\Desktop\NUS MComp\Y1S2\IT5100A\project\main\target\scala-2.13\zinc\inc_compile_2.13.zip,true)[0m
[0m[[0m[32msuccess[0m] [0m[0mTotal time: 0 s, completed 4 Mar 2022, 11:13:56 AM[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Done event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(shell, None, None)[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/cheew/OneDrive/Desktop/NUS%20MComp/Y1S2/IT5100A/project/main/src/main/scala/foodkeep/Controller.scala","languageId":"scala","version":1,"text":"// Scala.js\r\nimport org.scalajs.dom\r\nimport org.scalajs.dom.document\r\nimport org.scalajs.dom.html\r\nimport org.scalajs.dom.ext\r\nimport scala.scalajs.js\r\nimport js.annotation._\r\n\r\n// for making fetch request\r\n// import concurrent.ExecutionContext.Implicits.global\r\nimport js.Thenable.Implicits._\r\nimport org.scalajs.macrotaskexecutor.MacrotaskExecutor.Implicits._\r\n\r\nimport foodkeep.helper._\r\nimport foodkeep.util.util._\r\nimport foodkeep.util.ProfileUtil._\r\nimport foodkeep.util.DailyMealUtil._\r\nimport foodkeep.util.MonthlyMealUtil._\r\nimport foodkeep.util.StateUtil._\r\n\r\nimport foodkeep.model._\r\nimport foodkeep.view._\r\n\r\nobject Controller {\r\n    def main(args: Array[String]): Unit = {\r\n        // render views\r\n        ProfileView.render(Model.getCurrentProfileFromState)\r\n        ProfileUpdateView.render(Model.getCurrentProfileFromState)\r\n\r\n        SearchMealResultsView.render(Model.getSearchResultsFromState)\r\n\r\n        // add event handlers to DOM\r\n        ProfileUpdateView.addHandlerToggleUpdateProfile\r\n        ProfileUpdateView.addHandlerSubmitUpdateProfile(controlSubmitUpdateProfile)\r\n\r\n        SearchMealView.addHandlerStartSearchTimer(controlSearchMeal)\r\n        SearchMealView.addHandlerClearSearchTimer\r\n        \r\n        AddMealView.addHandlerAddMeal(controlAddMeal)\r\n    }\r\n\r\n    def controlSubmitUpdateProfile(profile: Profile): Boolean = {\r\n        Model.pushNewProfileToState(profile)\r\n        ProfileView.render(Model.getCurrentProfileFromState)\r\n        ProfileUpdateView.render(Model.getCurrentProfileFromState)\r\n\r\n        Model.getProfileHistoryFromState match {\r\n            case Some(r) if r.length == 1 => true\r\n            case _ => false\r\n        }\r\n    }\r\n\r\n    def controlSearchMeal(query: String): Unit = {\r\n        Model.pushNewSearchResultsToState(query).foreach{\r\n            results => {\r\n            SearchMealResultsView.render(results)}\r\n        }\r\n    }\r\n\r\n    def controlAddMeal(index: Int, expense: Double): Boolean = {\r\n        Model.getCurrentCaloriesTargetFromState match {\r\n            case Some(calories) => {\r\n                Model.pushNewMealToState(index, calories, expense)\r\n                // render output to SummaryView\r\n                true\r\n            }\r\n            case _ => false\r\n        }\r\n    \r\n    }   \r\n\r\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled request received: shutdown: JsonRpcRequestMessage(2.0, ♨1, shutdown, null})[0m
