src/main/scala/foodkeep/helper
Helper classes (doc: https://www.scala-js.org/doc/interoperability/sjs-defined-js-classes.html)
- SearchResult
	- Fields
		- val foodId: Int
		- val foodName: String
		- val caloriesContent: Int
		- val carbContent: Int
		- val proteinContent: Int
		- val fatContent: Int
	- Method
		- def parseSearchResultAsMeal: Meal
- Profile
	- Fields
		- val startDate: String
		- val endDate: String	// *set default value = "99999999"
		- val name: String
		- val birthDate: String
		- val gender: String
		- val weight: Double
		- val height: Double
		- val levelOfActivity: String
		- val caloriesTarget: Int
	- Method
		- def updateCaloriesTarget: Profile	
		- def updateEndDate(date: String): Profile
		- def updateStartDate(date: String): Profile
		- def getCaloriesTarget: Int					// use State.getCurrentCaloriesTarget
- Meal
	- Fields
		- val dateTime: String
		- val foodId: Int
		- val foodName: String
		- val expense: Double
		- val caloriesContent: Int
- DailyMeal
	- Fields
		- val date: String
		- val record: js.Array[Meal]
		- val totalExpenses: Double
		- val totalCalories: Int
		- val caloriesTarget: Int
	- Methods:
		- def pushNewMeal(meal): DailyMeal
- MonthlyMeal
	- Fields
		- val monthYear: String
		- val record: js.Array[DailyMeal]
		- val totalExpenses: Double
		- val totalCalories: Int
	- Methods
		- def pushNewMealMonthly(meal: Meal): MonthlyMeal			
		- def pushNewDailyMeal(caloriesTarget: Int): MonthlyMeal
		- def getDailyMeal(date): Option[DailyMeal]					// use State.getFilterQuery(date: String) 		
- State
	- Fields
		- val profileHistory: js.Array[Profile]		
		- val mealHistory: js.Array[MonthlyMeal]		
		- val searchResults: js.Array[SearchResult]	
	- Methods
		- setter
			- def pushNewProfile(profile: Profile): State
			- def pushNewMealState(meal: Meal): State						
			- def pushNewDailyMealState(caloriesTarget: Int): State					
			- def pushNewMonthlyMealState: State								
			- def pushNewSearchResults(results: js.Array[SearchResult]): State
		- getter
			- def getCurrentProfile: Option[Profile]
			- def getCurrentCaloriesTarget: Option[Int]			
			- def getFilterQuery(date: String): Option[(DailyMeal, MonthlyMeal)]
			- def getSearchResults: Option[js.Array[SearchResult]]
			- def getProfileHistory: Option[js.Array[Profile]]
		- misc
			- def checkDailyMonthlyPresent(date: String): (Boolean, Boolean) 


MVC		
- Model
	- var state		// initialise State
	- Functions
		- inititate setState
			- def pushNewProfileToState(profile: js.object): Unit				
			- def pushNewSearchResultsToState(query: String): Future[Option[js.Array[SearchResult]]]
			- def pushNewMealToState(index: Int): Unit		
		- access state
			- def getProfileHistoryFromState: Option[js.Array[Profile]] 
			- def getCurrentProfileFromState: Option[Profile]	
			- def getSearchResultsFromState: Option[js.Array[SearchResult]]						
			- def getCurrentCaloriesTargetFromState: Option[Int]
			- def getMealDataFromState(date: String)											// val (dailyMeal, monthlyMeal) = getFilterQuery(date: String)
		- misc
			- private def generateSearchResults(foods: js.Array[js.Dynamic]): js.Array[SearchResult]
			- private def findNutrientValue(nutrientId: Int, nutrients: js.Array[js.Dynamic]): Int
			- private def setState(state: State): Unit															
			- private def getStateFromLocalStorage: Option[State]
			- private def clearStateFromLocalStorage: Unit
			- private def init(): Unit																		

- View
	- ProfileView
		- def render(profile: Option[Profile]): Unit
		- private def renderBirthDate(date: String): String
	- ProfileUpdateView
		- def render(profile: Profile): Unit
		- def addHandlerToggleUpdateProfile: Unit									
		- def addHandlerSubmitUpdateProfile(handler: Profile => Unit): Unit
		- private def validateFormInput: Boolean
		- private def formatBirthDate(date: String): String
		- private def renderBirthDate(date: String): String
	- SearchMealView
		- def addHandlerStartSearchTimer(handler: String => Unit): Unit	
		- def addHandlerClearSearchTimer: Unit					
	- SearchMealResultsView
		- def render(searchResults: Option[js.Array[SearchResult]])	
		- private def renderFoodName(name: String)
		- private def generateMarkUpSearchResults(searchResults): String
	- AddMealView
		- def addHandlerAddMeal(handler: (Int, Double) => Boolean): Unit					
		- private def validateQueryFieldExpense(expense: String): Boolean
		- private def renderTime(date: String): String
	- SummarySearchView
		- def addHandlerSummarySearch(handler) 					// handler = controlSummarySearch; see: "controller :: controlSummarySearch"
	- SummaryView
		- def generateMarkUpSummaryTable(selectedDailyMeal)		
		- def render(selectedMeal)								// set container.innerHTML = generateMarkUpSummaryTable(selectedMeal._1) + ...

		
- Controller
	- def main(args: Array[String]): Unit						// SearchMealResultsView.render(...); SummaryView.render(...); ProfileView.render(...)
	- def controlSubmitUpdateProfile(profile: Profile): Boolean	
	- def controlSearchMeal(query: String)						
	- def controlAddMeal(index)def controlAddMeal(index: Int, expense: Double): Boolean	
	- def controlSummarySearch(dateQuery: String)				// "model :: accessSearchDateData(dateQuery)"  >>  returns selectedMeal  >>  "view :: SummaryView.render(selectedMeal)"



Misc
- Search meal
	- api: https://api.nal.usda.gov/fdc/v1/foods/search?query=hotdog&pageSize=1&api_key=mjJCK2kNtXWJuEsJ4eUWSrxjce9RPmf3hfEdjRdu
	- workflow: 
		- "keydown": setTimeout; initiate search in x ms
		- "keyup": clearTimeout; cancel most recent setTimeout	// not an error to clear timer that has alr lapsed
		- render search result
			- foods.map(
				- food.fdcId
				- food.description		// name of food	(= 1 serving)
				- food.foodNutrients.filter
					- nutrientId		// Calories (kCal), Carb (g), Protein (g), Fat (g) == 1008, 1005 ,1003, 1004
						- .value		// if nutrientId = undefined, return 0
		- display up to 10 search results
			- narrow down search if cannot find food item within the 10 search results
			- if food.description.length > 28, render ... after 28th char 
				- e.g. "Roast Chicken Marinated With Rose Mary" == "Roast Chicken Marinated With..."
			



